from flask import request, jsonify
from flask_cors import cross_origin
from . import dashboard_bp
from config import ALLOWED_ORIGINS_LIST, RATE_LIMIT_EDIT
from security import requires_editor_token
from ratelimit import limiter
from models import (
    listar_lancamentos_incompletos_view,
    listar_lancamentos_completos_view,
    adicionar_lancamentos_em_lote,
    obter_data_ultima_atualizacao,
    listar_ultimos_lancamentos_confirmados,
    listar_totais_mensais_por_imovel,
)

# ==========================================================
# 游댳 Lista de lan칞amentos incompletos para um im칩vel
# ==========================================================
@dashboard_bp.route('/dashboard/lancamentos/incompletos/<int:id_imovel>', methods=['GET'])
@cross_origin(origins=ALLOWED_ORIGINS_LIST or '*')
def get_lancamentos_incompletos(id_imovel):
    try:
        resultados = listar_lancamentos_incompletos_view(id_imovel)
        return jsonify(resultados), 200
    except Exception as e:
        print(f"Erro ao listar incompletos: {e}")
        return jsonify({"error": "Erro ao buscar lan칞amentos incompletos"}), 500

# ==========================================================
# 游댳 Lista de lan칞amentos completos para um im칩vel
# ==========================================================
@dashboard_bp.route('/dashboard/lancamentos/completos/<int:id_imovel>', methods=['GET'])
@cross_origin(origins=ALLOWED_ORIGINS_LIST or '*')
def get_lancamentos_completos(id_imovel):
    try:
        resultados = listar_lancamentos_completos_view(id_imovel)
        return jsonify(resultados), 200
    except Exception as e:
        print(f"Erro ao listar completos: {e}")
        return jsonify({"error": "Erro ao buscar lan칞amentos completos"}), 500

# ==========================================================
# 游댳 Adicionar lan칞amentos em lote
# ==========================================================
@dashboard_bp.route('/dashboard/lancamentos/lote', methods=['POST'])
@cross_origin(origins=ALLOWED_ORIGINS_LIST or '*')
@requires_editor_token
@limiter.limit(RATE_LIMIT_EDIT)
def adicionar_lote_lancamentos():
    novos = request.get_json()

    if not novos or not isinstance(novos, list):
        return jsonify({"error": "Nenhum lan칞amento recebido ou formato incorreto!"}), 400

    try:
        resultado = adicionar_lancamentos_em_lote(novos)
        return jsonify({
            "message": "Lan칞amentos adicionados com sucesso!",
            "total": resultado
        }), 201
    except ValueError as e:
        # Erros de valida칞칚o (ex.: data inv치lida)
        return jsonify({
            "error": "Dados inv치lidos no lote. Verifique as datas (use DD/MM/AAAA ou YYYY-MM-DD).",
            "details": str(e)
        }), 400
    except Exception as e:
        print(f"Erro ao adicionar lan칞amentos em lote: {e}")
        return jsonify({"error": "Erro ao adicionar lan칞amentos"}), 500

# ==========================================================
# 游댳 Excluir lan칞amento (completo ou incompleto)
# ==========================================================
@dashboard_bp.route('/dashboard/lancamentos/<int:id_lancamento>', methods=['DELETE', 'OPTIONS'])
@cross_origin(origins=ALLOWED_ORIGINS_LIST or '*')
@requires_editor_token
@limiter.limit(RATE_LIMIT_EDIT)
def excluir_lancamento_incompleto(id_lancamento):
    if request.method == 'OPTIONS':
        return jsonify({}), 200

    try:
        # Importa칞칚o aqui para evitar conflito circular
        from models import excluir_lancamento

        excluir_lancamento(id_lancamento)
        return jsonify({
            "message": f"Lan칞amento {id_lancamento} exclu칤do com sucesso!"
        }), 200
    except Exception as e:
        print(f"Erro ao excluir lan칞amento: {e}")
        return jsonify({"error": "Erro ao excluir lan칞amento"}), 500

# ==========================================================
# 游댳 Alterar lan칞amento (completo ou incompleto)
# ==========================================================
@dashboard_bp.route('/dashboard/lancamentos/<int:id_lancamento>', methods=['PATCH', 'OPTIONS'])
@cross_origin(origins=ALLOWED_ORIGINS_LIST or '*')
@requires_editor_token
@limiter.limit(RATE_LIMIT_EDIT)
def alterar_lancamento_incompleto(id_lancamento):
    if request.method == 'OPTIONS':
        return jsonify({}), 200

    data = request.get_json()

    if not data:
        return jsonify({"error": "Dados n칚o recebidos para atualiza칞칚o"}), 400

    try:
        # Importa칞칚o aqui para evitar conflito circular
        from models import alterar_lancamento

        alterar_lancamento(id_lancamento, data)
        return jsonify({"message": "Lan칞amento atualizado com sucesso!"}), 200
    except ValueError as e:
        return jsonify({
            "error": "Dados inv치lidos na atualiza칞칚o. Verifique as datas (use DD/MM/AAAA ou YYYY-MM-DD) e os campos obrigat칩rios.",
            "details": str(e)
        }), 400
    except Exception as e:
        print(f"Erro ao alterar lan칞amento: {e}")
        return jsonify({"error": "Erro ao atualizar lan칞amento"}), 500

# ==========================================================
# 游댳 Rodap칠: Data de atualiza칞칚o e 칰ltimos lan칞amentos
# ==========================================================
@dashboard_bp.route('/dashboard/ultima_atualizacao', methods=['GET'])
@cross_origin(origins=ALLOWED_ORIGINS_LIST or '*')
def get_ultima_atualizacao():
    try:
        data_str = obter_data_ultima_atualizacao()
        return jsonify({"data": data_str}), 200
    except Exception as e:
        print(f"Erro ao obter data de atualiza칞칚o: {e}")
        return jsonify({"error": "Erro ao obter data de atualiza칞칚o"}), 500


@dashboard_bp.route('/dashboard/ultimos_lancamentos', methods=['GET'])
@cross_origin(origins=ALLOWED_ORIGINS_LIST or '*')
def get_ultimos_lancamentos():
    try:
        limit = request.args.get('limit', 10)
        itens = listar_ultimos_lancamentos_confirmados(limit)
        return jsonify(itens), 200
    except Exception as e:
        print(f"Erro ao listar 칰ltimos lan칞amentos: {e}")
        return jsonify({"error": "Erro ao listar 칰ltimos lan칞amentos"}), 500


@dashboard_bp.route('/dashboard/gastos-mensais', methods=['GET'])
@cross_origin(origins=ALLOWED_ORIGINS_LIST or '*')
def get_gastos_mensais():
    try:
        meses = request.args.get('meses', 6)
        excluir_raw = request.args.get('excluir', '').strip()
        categorias_excluidas = None
        if excluir_raw:
            categorias_excluidas = []
            for parte in excluir_raw.split(','):
                parte = parte.strip()
                if not parte:
                    continue
                try:
                    categorias_excluidas.append(int(parte))
                except Exception:
                    continue

        dados = listar_totais_mensais_por_imovel(meses, categorias_excluidas)
        return jsonify(dados), 200
    except Exception as e:
        print(f"Erro ao listar gastos mensais: {e}")
        return jsonify({"error": "Erro ao listar gastos mensais"}), 500
